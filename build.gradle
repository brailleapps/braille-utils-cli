apply plugin: 'application'
apply plugin: 'maven'
apply plugin: "signing"

mainClassName = "org.daisy.braille.ui.BasicUI"
startScripts.applicationName = 'brailleutils'

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc {
	options.encoding = 'UTF-8'
	options.links('http://docs.oracle.com/javase/8/docs/api/');
}
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

def repoRevision = System.getenv("REPO_REVISION")!=null?System.getenv("REPO_REVISION"):repositoryRevision

group = "org.daisy.braille"

ext {
	versions = [
			'junit'		: '4.7',
			'osgi'		: '5.0.0',
			'felix'		: '4.4.1',
			'paxExam'	: '3.5.0', //4.4.0 requires Java 7
			'paxUrl'	: '2.3.0',
	]
}

sourceSets {
	main {	java { srcDir 'src' }	resources { srcDir 'src' } }
	test {
		java {
			srcDir 'test'
			srcDir 'integrationtest'
		}
		resources {
			srcDir 'test'
			srcDir 'integrationtest'
		}
	}
}

// required for gradle build outside of Eclipse
task copyTestResources(type: Copy) {
    from "${projectDir}/integrationtest"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources
//

jar.doFirst {
	manifest {
    	attributes ('Built-By': System.getProperty("user.name"),
    	'Main-Class': mainClassName,
		'Built-On': new Date().format('yyyy-MM-dd'),
		'Repository-Revision': "$repoRevision",
		'Implementation-Title': "$releaseName",
		'Implementation-Version': version,
		'Implementation-URL': "$repositoryURL",
		'Class-Path': configurations.compile.collect { it.getName() }.join(' ')			//'${core.classpath.attribute}'
		)
	}
	from sourceSets.main.allJava
	baseName = 'braille-utils.ui'
}

repositories {
	mavenCentral()
	//mavenLocal()
	//maven { url "https://oss.sonatype.org/content/groups/staging" }
}

dependencies {
	compile 'org.daisy.braille:braille-utils.api:2.0.0'
	compile 'org.daisy.braille:braille-utils.basic-cli:1.0.0'
	compile 'org.daisy.braille:braille-utils.pef-tools:1.0.0'
	
	runtime 'org.daisy.braille:braille-utils.impl:2.0.0'
	
	testCompile group: 'junit', name: 'junit', version: "$versions.junit"
	
	testCompile "javax.inject:javax.inject:1"
	testCompile "org.ops4j.pax.exam:pax-exam-junit4:$versions.paxExam"
	testRuntime "org.ops4j.pax.exam:pax-exam-container-native:$versions.paxExam"
	testRuntime "org.ops4j.pax.exam:pax-exam-link-mvn:$versions.paxExam"
	testRuntime "org.ops4j.pax.url:pax-url-aether:$versions.paxUrl"
	testRuntime "org.ops4j.pax.url:pax-url-reference:$versions.paxUrl"
	testRuntime "org.ops4j.pax.url:pax-url-wrap:$versions.paxUrl"
	testRuntime "org.apache.felix:org.apache.felix.framework:$versions.felix"
	testCompile("org.osgi:org.osgi.core:$versions.osgi")
	testCompile("org.osgi:org.osgi.compendium:$versions.osgi")
}

applicationDistribution.from(file('docs')) {
    into 'docs'
}
applicationDistribution.from(file('licenses')) {
	into 'licenses'
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives javadocJar, sourcesJar
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

signing {
	required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
	sign configurations.archives
}

uploadArchives {
	//Only upload if a git hash is supplied. On Travis only upload snapshots.
	enabled = repoRevision.size()==40 && (System.getenv("TRAVIS_BUILD_ID")==null || version.endsWith("SNAPSHOT"))
	repositories {
		mavenDeployer {
			if (isReleaseVersion) {
				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
			}
			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
				authentication(userName: sonatypeUsername, password: sonatypePassword)
			}
			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
				authentication(userName: sonatypeUsername, password: sonatypePassword)
			}
            pom.project {
				name 'braille-utils.ui'
				packaging 'jar'
				description 'Braille Utils CLI'
				url "$repositoryURL"
				scm {
					connection "$repositorySCM"
					developerConnection "$repositorySCM"
					url "$repositoryURL"
				}
                licenses {
					license {
						name 'LGPL'
						url 'http://www.gnu.org/licenses/lgpl.html'
					}
                }
				developers {
					developer {
						id 'joel'
						name 'Joel HÃ¥kansson'
					}
				}
			}
		}
	}
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.11'
}